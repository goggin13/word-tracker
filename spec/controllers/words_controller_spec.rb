require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe WordsController do

  # This should return the minimal set of attributes required to create a valid
  # Word. As you add validations to Word, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { "text" => "MyString", "user_id" => 1 } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # WordsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    it "assigns all words as @words" do
      word = Word.create! valid_attributes
      get :index, {}, valid_session
      assigns(:words).should eq([word])
    end
  end

  describe "GET show" do
    it "assigns the requested word as @word" do
      word = Word.create! valid_attributes
      get :show, {:id => word.to_param}, valid_session
      assigns(:word).should eq(word)
    end
  end

  describe "GET new" do
    it "assigns a new word as @word" do
      get :new, {}, valid_session
      assigns(:word).should be_a_new(Word)
    end
  end

  describe "DELETE destroy" do
    describe "authenticated" do
      before do
        sign_in FactoryGirl.create(:user)
      end

      it "destroys the requested word" do
        word = Word.create! valid_attributes
        expect {
          delete :destroy, {:id => word.to_param}, valid_session
        }.to change(Word, :count).by(-1)
      end

      it "redirects to the words list" do
        word = Word.create! valid_attributes
        delete :destroy, {:id => word.to_param}, valid_session
        response.should redirect_to(words_url)
      end
    end

    describe "unauthenticated" do
      it "redirects to the home page" do
        word = Word.create! valid_attributes
        expect do
          delete :destroy, {:id => word.to_param}, valid_session
          response.should redirect_to(root_path)
        end.to change(Definition, :count).by(0)
      end
    end
  end

  describe "POST create" do
    describe "authenticated" do
      before do
        @user = FactoryGirl.create(:user)
        sign_in @user
      end

      it "returns existing definitions if they are available" do
        word = FactoryGirl.create(:word, text: "word1", :user => @user)
        FactoryGirl.create(:definition, text: "word1 means word1", word: word)
        FactoryGirl.create(:definition, text: "word1 also means word1", word: word)

        post :create, word: "word1", format: :json

        response.status.should == 200
        JSON.parse(response.body).should == {
          "word1" => ["word1 means word1", "word1 also means word1"]
        }
      end

      it "looks up the defintion from wordnik" do
        VCR.use_cassette "hysteria_api_response" do
          post :create, :word => "hysteria", format: :json
          response.status.should == 200
          result = JSON.parse(response.body)

          result.should == {
            "hysteria" => [
              "Behavior exhibiting excessive or uncontrollable emotion, such as fear or panic.",
              "A mental disorder characterized by emotional excitability and sometimes by amnesia or a physical deficit, such as paralysis, or a sensory deficit, without an organic cause."
            ]
          }
        end
      end

      it "returns 422 if the definition cannot be located" do
        VCR.use_cassette "not_found_api_response" do
          post :create, :word => "this-word-wont-be-found", format: :json
          response.status.should == 422
          result = JSON.parse(response.body)
          result["errors"][0].should == "No definition found for 'this-word-wont-be-found'"
        end
      end
    end

    describe "unauthorized" do
      it "returns 401 for a JSON request" do
        post :create, word: "word1", format: :json
        response.status.should == 401
      end

      it "redirects to the home page with a warning for a web request" do
        post :create, word: "word1"

        response.should redirect_to "/"
        flash[:warning].should == "You must be logged in."
      end
    end
  end
end
